clear; close all; clc;
rng('shuffle');
%Initialization
AllParams = WholeBrainInitializationMain();
%Load imaging data
[Network, EBM] = WholeBrainLoadImages(AllParams);
%Order based on network metrics - correlation with EBM order
%NetworkMetricsCorrelations = WholeBrainCorrelateNetworkMetricsEBM(Network, EBM, AllParams, true);

global NumOptimisationIterations
fclose(fopen('OptimisationIterations.csv', 'w'));

if(AllParams.OptimizationOrManualSearch == 0)
    AllParams = WholeBrainOptimalStartingParameters(Network, EBM, AllParams);
    if(AllParams.MACorCluster == 2)
        dlmwrite('Started.dat',1,' ');
    end
    FitnessFunction = @(Input) WholeBrainOptimization(Input, AllParams, Network, EBM);
    while(true)
        NumOptimisationIterations = 0;
        % BAD
        if(AllParams.ChosenOptimization == 1)
            options = optimoptions('patternsearch', ...
                'SearchFcn', {@searchlhs,1,30*sum(AllParams.MyInput>=0)}, ...
                'MeshTolerance', 1e-6, ...
                'MeshExpansionFactor', 1e2, ...
                'UseCompleteSearch', true, ...
                'FunctionTolerance', 1e-15, ...
                'InitialMeshSize', 0.1, ...
                'UseCompletePoll', true, ...
                'UseParallel', false, ...
                'MaxTime', 60*60*24*100, ...
                'Display', 'iter');
            [OptimalParameters, OptimalValue, exitflag, info] = patternsearch(FitnessFunction, AllParams.MyInput, [], [], [], [], AllParams.InputLBound, AllParams.InputUBound, [], options);
            % BAD
        elseif(AllParams.ChosenOptimization == 2)
            [OptimalValue, OptimalParameters, costVector] = cuckooMain(FitnessFunction, AllParams.MyInput, 0, 1);
        elseif(AllParams.ChosenOptimization == 3)
            %AllParams.InputUBound([2 3 4 6:16]) = 0;
            %AllParams.InputUBound([4 6:16]) = 0;            
            options = optimoptions('particleswarm', ...
                'HybridFcn',@patternsearch, ...
                'FunctionTolerance', 1e-15, ...
                'UseParallel', false, ...
                'MaxTime', 60*60*24*100, ...
                'Display', 'iter');
            [OptimalParameters, OptimalValue, ~, ~] = particleswarm(FitnessFunction,numel(AllParams.MyInput),AllParams.InputLBound,AllParams.InputUBound,options);
        
        elseif(AllParams.ChosenOptimization == 4)
            options = optimoptions('simulannealbnd', ...
                'HybridFcn',@patternsearch, ...
                'MaxTime', 60*60*24*100, ...
                'Display', 'iter');
            [OptimalParameters, OptimalValue, ~, ~] = simulannealbnd(FitnessFunction,AllParams.MyInput,AllParams.InputLBound,AllParams.InputUBound,options);
            % BAD
        elseif(AllParams.ChosenOptimization == 5)%https://www.mat.univie.ac.at/~neum/software/mcs/
            [OptimalParameters,OptimalValue,OptimalParametersAllLocalMinima,OptimalValuesAllLocalMinima,ncall,ncloc]=mcs('feval',FitnessFunction,AllParams.InputLBound,AllParams.InputUBound);
        elseif(AllParams.ChosenOptimization == 6)%http://www.norg.uminho.pt/aivaz/pswarm/
            Problem.ObjFunction = FitnessFunction;
            Problem.A  = AllParams.InputABound(3:end,:);
            Problem.b  = AllParams.InputBBound(3:end);
            Problem.LB = AllParams.InputLBound;
            Problem.UB = AllParams.InputUBound;
            [OptimalParameters, OptimalValue, RunData]=PSwarm(Problem);
        end
        load('GPS.mat');
        fprintf('Current iteration optimal value: %f\nAll iterations optimal value: %f\n',OptimalValue,OptimalValues(AllParams.ModelIndex));
        if(AllParams.MACorCluster == 2)
            dlmwrite('Finished.dat',1,' ');
        end
    end
    
elseif(AllParams.OptimizationOrManualSearch == 1)
    % AllParams.MyInput = 1[AllParams.Seedsize; ...
    %     2AllParams.ExtracellularDiffusionFraction; ...
    %     3AllParams.ExtracellularDiffusionSpeed; ...
    %     4AllParams.NetworkDiffusionWeightFractionFMRI; ...
    %     5AllParams.NetworkDiffusionWeightFractionDTI; ...
    %     6AllParams.NetworkDiffusionWeightFractionDCM; ...
    %     7AllParams.NetworkDiffusionWeightDistanceFractionFMRI; ...
    %     8AllParams.NetworkDiffusionWeightDistanceFractionDTI; ...
    %     9AllParams.NetworkDiffusionWeightDistanceFractionDCM; ...
    %     10AllParams.SynapticTransferWeightFractionFMRI; ...
    %     11AllParams.SynapticTransferWeightFractionDTI; ...
    %     12AllParams.SynapticTransferWeightFractionDCM; ...
    %     13AllParams.SynapticTransferWeightDistanceFractionFMRI; ...
    %     14AllParams.SynapticTransferWeightDistanceFractionDTI; ...
    %     15AllParams.SynapticTransferWeightDistanceFractionDCM; ...
    %     16AllParams.NetworkDiffusionSpeed; ...
    %
    %     17AllParams.NEURONMisfold; ...
    %     18AllParams.NEURONDiffusionSpeed; ...
    %     19AllParams.NEURONDiffusion; ...
    %     20AllParams.NEURONTransport; ...
    %     21AllParams.NEURONSynaptic; ...
    %     22AllParams.NEURONDamage];
    MyInput          = [0.1 0.1 0.01 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.1 0.01 500 0.3 0.3 0.3 0.01];
    AllParams        = WholeBrainOptimizationPassParameters(MyInput, AllParams);
    Parameters       = WholeBrainParameters(Network, AllParams);
    Results          = WholeBrainRunSimulation(Network, Parameters, EBM);
    ProcessedResults = WholeBrainProcessResults(Network, Results, EBM, Parameters);
    ProcessedResults = WholeBrainPlotResultsSingleSimulation(Network, ProcessedResults, EBM, AllParams, true);
end








